---
title: "Reproducible document"
author: "Nemanja Stanojevic"
format: html
---
## Basics of R
```{r}
```

```{r}
1 + 1
```



## About me
-  Nemanja
-  Stanojevic
-  Roskilde University
I am from *Serbia*, I am a **Medical doctor**

## Simple code
```{r}
3 * 3
```
## Testing for Git
The weather is awful
  
```{r setup}
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read_csv2(
  here::here("data/post-meal-insulin.csv")
)
small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)

tidier_post_meal_data <- small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)

tidied_post_meal_data <- tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```

### Showing the data

```{r}
post_meal_data
```

```{r}
glimpse(post_meal_data)
```

```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
```{r}
#| fig-cap: "Distribution of BMI"
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```
@fig-bmi-histo


```{r}
#| fig-cap: "Glykemi"
#| label: fig-glykemi-bar
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```


```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = glykemi)) +
  geom_bar()
```
```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar()
```
```{r}
post_meal_data |>
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```

## Putting two plots side by side

```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

```{r}
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

```{r side-by-side}
#| label: "fig-bmi-glycemia"
#| fig-cap: "BMI and glycemia, side by side"
#| fig-subcap:
#|  - "Distribution of BMI."
#|  - "Number of those with glycemia."
#| layout-ncol: 2
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

## Plotting two continuous variables

```{r}
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point()
```

```{r}
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```

```{r}
#| fig-cap: "Scatterplot of BMI and the area under the curve for glucose."
#| label: fig-bmi-auc-pg
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() +
  geom_smooth()
```


## Pushing changes to remote

## Pulling changes locally

## Selecting data

```{r}
select(post_meal_data, Age)
```
```{r}
select(post_meal_data, Age, BMI, Weight)
```
```{r}
select(post_meal_data, -Group)
```

```{r}
select(post_meal_data, starts_with("PG"))
```

```{r}
select(post_meal_data, ends_with("DXA"))
```
```{r}
select(post_meal_data, contains("0"))
```
## Renaming specific columns


```{r}
small_post_meal_data |>
  rename(auc_glucose = auc_pg)

small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  )
```


## Select and rename tasks


```{r}
select(post_meal_data, contains("OGTT"))
```

```{r}
select(post_meal_data, contains(".."), -contains("..."))
```
```{r}
post_meal_data |>
  select(id, BMI, Length, Weight, Age) |>
  rename(Height = Length)
```

## Filtering data by row

```{r}
small_post_meal_data |>
  filter(glykemi == 1)

small_post_meal_data |>
  filter(BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR")
```


```{r}
TRUE & TRUE
```
```{r}
small_post_meal_data |>
  filter(Group == "CTR", BMI >= 25)

small_post_meal_data |>
  filter(Group == "CTR" | BMI >= 25)
```
## Modify or add column

```{r}
tidier_post_meal_data |>
  mutate(insuline_glucose_ratio = auc_insulin / auc_glucose)
```
```{r}
tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control",
      "First-degree relative"
    )
  )
```

## Practice with filter and mutate


```{r}
post_meal_data |>
  filter(BMI >= 25 & BMI <= 40 & Group == "FDR")
```

```{r}
post_meal_data |>
  mutate(percent_body_fat = (Fat.mass.DXA / Weight) * 100) |>
  filter(percent_body_fat > 30)
```


## Visualizing with jitter plot

```{r}
tidied_post_meal_data |>
  mutate(overweight = if_else(BMI >= 25, "Overweight", "Not overweight")) |>
  ggplot(aes(
    x = overweight, y = insulin_glucose_ratio
  )) +
  geom_jitter()
```

## Plotting three or more variables


```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  ggplot(aes(x = Age, y = auc_insulin, colour = Group)) +
  geom_point()
```

```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(young = if_else(Age < 40, "Young", "Old")) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(rows = vars(young)) +
  labs(
    x = "Body mass index (BMI)",
    y = "Insulin to glucose ratio"
  )
```

## Make multidimensional plots

```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2
# Task 1.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100,
    young = if_else(Age < 40, "Young", "Old")
  )
post_meal_data |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA)) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```


## Changing colours

```{r}
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d()
# scale_fill_viridis_d(option = "magma")

post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c()
# scale_colour_viridis_c(option = "inferno")
```

## Calculating summary statistics

```{r}
tidied_post_meal_data |>
  summarise(
    max_bmi = max(BMI),
    min_bmi = min(BMI)
  )
```

## Summarize with splitting

```{r}
tidied_post_meal_data |>
  group_by(Group) |>
  summarise(
    mean_age = mean(Age),
    mean_bmi = mean(BMI)
  ) |>
  ungroup()
```
